#!/usr/bin/env python3

import sounddevice as sd
import numpy as np
import librosa
import time
import keyboard

import wtraff

# Configuration
sample_rate = 22050
buffer_duration = 10  # seconds
buffer_size = sample_rate * buffer_duration
block_duration = 2  # seconds
block_size = sample_rate * block_duration

# Buffer to store audio data
audio_buffer = np.zeros((0,))

def audio_callback(indata, frames, time, status):
  global audio_buffer
  if status:
    print(f"Error: {status}")
  audio_buffer = np.append(audio_buffer, indata.flatten())
  if len(audio_buffer) > buffer_size:
    audio_buffer = audio_buffer[-buffer_size:]

def process_audio():
  global audio_buffer
  while True:
    if len(audio_buffer) >= buffer_size:
      buffer_copy = np.copy(audio_buffer)
      
      # Detect BPM
      tempo, _ = librosa.beat.beat_track(y=buffer_copy, sr=sample_rate)
      tempo = tempo[0]
      print(f"BPM: {tempo}")
      
      # Detect pitch
      pitches, magnitudes = librosa.core.piptrack(y=buffer_copy, sr=sample_rate)
      pitches = pitches[magnitudes > np.median(magnitudes)]
      if len(pitches) > 0:
        pitch = np.median(pitches)
        print(f"Pitch: {pitch} Hz")
      else:
        print("Pitch: No pitch detected")
      audio_buffer = np.zeros((0,))

      wtraff.update(tempo, pitch)

wtraff.init()

# Catch keyboard interrupt
try:
  # Start audio stream
  stream = sd.InputStream(callback=audio_callback, channels=1, samplerate=sample_rate, blocksize=block_size)
  with stream:
    print("Starting audio stream...")
    process_audio()
except KeyboardInterrupt:
  pass

wtraff.end()
