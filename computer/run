#!/usr/bin/env python3

# You better ruuuun, ruuuun, ruuun, ruuuuuuun, ruun

import bluetooth
import time
import keyboard

bd_addr = "00:22:05:00:31:4D"
port = 1
current_red = 0
current_yellow = 0
current_green = 0

def int_to_16bit_bytes(value):
    """
    Convert a given integer to a 2-byte representation if it fits in a 16-bit signed integer range.

    Args:
        value (int): The integer value to convert.

    Returns:
        bytes: A 2-byte representation of the integer.

    Raises:
        ValueError: If the integer is out of the 16-bit signed integer range.
    """
    # 16-bit signed integer range: -32768 to 32767
    if value < -32768 or value > 32767:
        raise ValueError("Integer out of range for 16-bit signed integer.")

    # Convert to 2-byte representation using little-endian byte order
    return value.to_bytes(2, byteorder='big', signed=True)

def send_data(data):
    """
    Send data via the Bluetooth socket.
    
    Args:
        data (bytes): Data to send.
    """
    sock.send(data)

def on_press(event):
    """
    Handle key press events.
    
    Args:
        event (keyboard.KeyboardEvent): The keyboard event.
    """
    if event.name == 'q':
        if current_green == 0:
          data = bytes([0, 255] + list(int_to_16bit_bytes(3)))
          current_green = 255
        else:
          data = bytes([0, 0] + list(int_to_16bit_bytes(-3)))
          current_green = 0
        sock.send(data)
    elif event.name == 'w':
        if current_yellow == 0:
          data = bytes([1, 255] + list(int_to_16bit_bytes(3)))
          current_yellow = 255
        else:
          data = bytes([1, 0] + list(int_to_16bit_bytes(-3)))
          current_yellow = 0
        sock.send(data)
    elif event.name == 'e':
        if current_red == 0:
          data = bytes([2, 255] + list(int_to_16bit_bytes(3)))
          current_red = 255
        else:
          data = bytes([2, 0] + list(int_to_16bit_bytes(-3)))
          current_red = 0
        sock.send(data)



# Create a Bluetooth socket
sock = bluetooth.BluetoothSocket(bluetooth.RFCOMM)
sock.connect((bd_addr, port))

data = bytes(list(int_to_16bit_bytes(1000)))
sock.send(data)

# Set up the keyboard event listener
keyboard.on_press(on_press)

# Keep the program running to listen for events
print("Press Q, W, or E to send data. Press ESC to exit.")
keyboard.wait('esc')

# Close the socket
sock.close()
